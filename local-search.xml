<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>io测试工具fio使用</title>
    <link href="/2020/08/05/io%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7fio%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/08/05/io%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7fio%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h6 id="fio是一个测试iops的工具，用来对硬件进行压力测试和验证，支持13种不同的I-O引擎，包括-sync-mmap-libaio-posixaio-SGv3-splice-null-network-syslet-guasi-solarisaio等等"><a href="#fio是一个测试iops的工具，用来对硬件进行压力测试和验证，支持13种不同的I-O引擎，包括-sync-mmap-libaio-posixaio-SGv3-splice-null-network-syslet-guasi-solarisaio等等" class="headerlink" title="fio是一个测试iops的工具，用来对硬件进行压力测试和验证，支持13种不同的I/O引擎，包括:sync,mmap,libaio,posixaio,SGv3,splice,null,network,syslet,guasi,solarisaio等等"></a>fio是一个测试iops的工具，用来对硬件进行压力测试和验证，支持13种不同的I/O引擎，包括:sync,mmap,libaio,posixaio,SGv3,splice,null,network,syslet,guasi,solarisaio等等</h6><pre><code class="hljs awk">github地址 ：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/axboe/</span>fio</code></pre><h5 id="fio使用"><a href="#fio使用" class="headerlink" title="fio使用"></a>fio使用</h5><p>通过使用Fio Job file (configuration) 来编辑好，我们要测试的具体参数值。通过命令 fio fio.cfg 开始测试</p><pre><code class="hljs routeros">$ cat fio.cfg[global]<span class="hljs-attribute">filename</span>=/dev/sdb<span class="hljs-attribute">direct</span>=1<span class="hljs-attribute">ioengine</span>=libaiotime_based<span class="hljs-attribute">runtime</span>=600<span class="hljs-attribute">iodepth</span>=4refill_buffersgroup_reportingwait_for_previous<span class="hljs-attribute">ramp_time</span>=5[JOB1]<span class="hljs-attribute">bs</span>=4k<span class="hljs-attribute">rw</span>=read[JOB2]<span class="hljs-attribute">bs</span>=32k<span class="hljs-attribute">rw</span>=read[JOB3]<span class="hljs-attribute">bs</span>=4k<span class="hljs-attribute">rw</span>=randread[JOB4]<span class="hljs-attribute">bs</span>=32k<span class="hljs-attribute">rw</span>=randread$ sudo fio fio.cfg | tee /tmp/fiotest.log</code></pre><h5 id="配置参数说明"><a href="#配置参数说明" class="headerlink" title="配置参数说明"></a>配置参数说明</h5><pre><code class="hljs routeros"><span class="hljs-attribute">filename</span>=/dev/sdb        测试文件名称，通常选择需要测试的盘的data目录，做写测试的时候需要换成对应的/data/fioxxx要不然磁盘全盘随机写之后系统将不可用<span class="hljs-attribute">direct</span>=1                 测试过程绕过机器自带的buffer。使测试结果更真实。<span class="hljs-attribute">rw</span>=randwrite             测试随机写的I/O<span class="hljs-attribute">rw</span>=randrw                测试随机写和读的I/O<span class="hljs-attribute">bs</span>=4k                    单次io的块文件大小为16k<span class="hljs-attribute">bsrange</span>=512-2048         同上，提定数据块的大小范围，参考配置<span class="hljs-attribute">size</span>=5g                      本次的测试文件大小为5g，以每次4k的io进行测试。没有写默认为100%，写100%测试结果更真实<span class="hljs-attribute">numjobs</span>=4                本次的测试线程为4 这个参数的设定跟队列深度一样 会影响测试结果<span class="hljs-attribute">runtime</span>=600              测试时间为600秒，如果不写则一直将5g文件分4k每次写完为止。<span class="hljs-attribute">ioengine</span>=libaio          io引擎使用pync方式<span class="hljs-attribute">rwmixwrite</span>=30            在混合读写的模式下，写占30%group_reporting          关于显示结果的，汇总每个进程的信息。refill_buffers           为预设值跟I/O Buffer有关(refill the IO buffers on every submit),把Buffer跑慢之后就不会再跑到Buffer的值wait_for_previous        预设所有的job会一起执行，这个参数，可以让所有的job依次执行iodepth                  队列深度，就是一把喂给设备多少的iotime_based               测试以时间为单位，另外一种方式是以kb_baseramp_time                设定ramp_time会让开始测试的一段时间不统计到整体里面，避免测试是跑在cache里面的</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>openfalcon报警触发函数</title>
    <link href="/2020/08/05/openfalcon%E6%8A%A5%E8%AD%A6%E8%A7%A6%E5%8F%91%E5%87%BD%E6%95%B0/"/>
    <url>/2020/08/05/openfalcon%E6%8A%A5%E8%AD%A6%E8%A7%A6%E5%8F%91%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs angelscript">all(#<span class="hljs-number">3</span>): 最新的<span class="hljs-number">3</span>个点都满足阈值条件则报警max(#<span class="hljs-number">3</span>): 对于最新的<span class="hljs-number">3</span>个点，其最大值满足阈值条件则报警min(#<span class="hljs-number">3</span>): 对于最新的<span class="hljs-number">3</span>个点，其最小值满足阈值条件则报警sum(#<span class="hljs-number">3</span>): 对于最新的<span class="hljs-number">3</span>个点，其和满足阈值条件则报警avg(#<span class="hljs-number">3</span>): 对于最新的<span class="hljs-number">3</span>个点，其平均值满足阈值条件则报警diff(#<span class="hljs-number">3</span>): 拿最新push上来的点（被减数），与历史最新的<span class="hljs-number">3</span>个点（<span class="hljs-number">3</span>个减数）相减，得到<span class="hljs-number">3</span>个差，只要有一个差满足阈值条件则报警pdiff(#<span class="hljs-number">3</span>): 拿最新push上来的点，与历史最新的<span class="hljs-number">3</span>个点相减，得到<span class="hljs-number">3</span>个差，再将<span class="hljs-number">3</span>个差值分别除以减数，得到<span class="hljs-number">3</span>个商值，只要有一个商值满足阈值则报警   lookup(#<span class="hljs-number">3</span>,<span class="hljs-number">2</span>): 最新的<span class="hljs-number">3</span>个点中有两个满足条件则报警</code></pre>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
    </categories>
    
    
    <tags>
      
      <tag>openfalcon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openfalcon报警策略中diff和pdiff对比</title>
    <link href="/2020/08/05/oepnfalcon/"/>
    <url>/2020/08/05/oepnfalcon/</url>
    
    <content type="html"><![CDATA[<p>falcon的告警策略中，为了满足对突增、突降流量的告警，提供了diff和pdiff的表达式</p><pre><code class="hljs"><span class="hljs-attribute">diff(#3)</span>: 拿最新push上来的点（被减数），与历史最新的3个点（3个减数）相减，得到3个差，只要有一个差满足阈值条件则报警<span class="hljs-attribute">pdiff(#3)</span>: 拿最新push上来的点，与历史最新的3个点相减，得到3个差，再将3个差值分别除以减数，得到3个商值，只要有一个商值满足阈值则报警设计diff和pdiff是为了监控流量突增突降报警，其中pdiff是按照百分比方式进行对比。 源码：https://github.com/open-falcon/judge/blob/master/store/func.go</code></pre><h5 id="diff和pdiff的使用示例："><a href="#diff和pdiff的使用示例：" class="headerlink" title="diff和pdiff的使用示例："></a>diff和pdiff的使用示例：</h5><pre><code class="hljs angelscript">diff(#<span class="hljs-number">3</span>): 拿最新push上来的点（被减数），与历史最新的<span class="hljs-number">3</span>个点（<span class="hljs-number">3</span>个减数）相减，得到<span class="hljs-number">3</span>个差，只要有一个差满足阈值条件则报警公式：d2 - d1注意：d2小于d1的时候会出现负值比方说数据是每分钟上报一个点，当前时间是<span class="hljs-number">2016</span><span class="hljs-number">-03</span><span class="hljs-number">-24</span> <span class="hljs-number">10</span>:<span class="hljs-number">04</span>:<span class="hljs-number">00</span>，上报的数据点的值为d4=<span class="hljs-number">100</span>，<span class="hljs-number">10</span>:<span class="hljs-number">03</span>:<span class="hljs-number">00</span>上报的数据点为d3=<span class="hljs-number">80</span>，<span class="hljs-number">10</span>:<span class="hljs-number">02</span>:<span class="hljs-number">00</span>上报的数据点为d2=<span class="hljs-number">60</span>，<span class="hljs-number">10</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span>上报的数据点为d1=<span class="hljs-number">40</span>，diff(#<span class="hljs-number">3</span>)表示的函义就是d4分别减去d3/d2/d1，得到的三个值<span class="hljs-number">20</span>/<span class="hljs-number">40</span>/<span class="hljs-number">60</span>只要有一个值满足阈值条件都会报警。</code></pre><pre><code class="hljs angelscript">pdiff(#<span class="hljs-number">3</span>): 拿最新push上来的点，与历史最新的<span class="hljs-number">3</span>个点相减，得到<span class="hljs-number">3</span>个差，再将<span class="hljs-number">3</span>个差值分别除以减数，得到<span class="hljs-number">3</span>个商值，只要有一个商值满足阈值则报警。公式：(d2 - d1)/d1*<span class="hljs-number">100.0</span>注意：d2小于d1的时候会出现负值还以上述数据上报为例，d4分别减去d3/d2/d1，得到三个差值：<span class="hljs-number">20</span>/<span class="hljs-number">40</span>/<span class="hljs-number">60</span>，每个差值分别除以对应的减数d3/d2/d1，再乘以<span class="hljs-number">100.0</span>，得到<span class="hljs-number">3</span>个商值：<span class="hljs-number">25.0</span>/<span class="hljs-number">66.67</span>/<span class="hljs-number">150.0</span>，只要有一个商值满足阈值则报警。</code></pre>]]></content>
    
    
    <categories>
      
      <category>监控</category>
      
    </categories>
    
    
    <tags>
      
      <tag>openfalcon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tcpdump抓包</title>
    <link href="/2020/08/05/tcpdump/"/>
    <url>/2020/08/05/tcpdump/</url>
    
    <content type="html"><![CDATA[<h5 id="只获取GET请求："><a href="#只获取GET请求：" class="headerlink" title="只获取GET请求："></a>只获取GET请求：</h5><pre><code class="hljs apache"><span class="hljs-attribute">port</span> <span class="hljs-number">80</span> and (tcp[<span class="hljs-number">32</span>:<span class="hljs-number">4</span>] - <span class="hljs-number">0</span>x<span class="hljs-number">47455420</span> = <span class="hljs-number">0</span>)</code></pre><h5 id="只获取POST请求："><a href="#只获取POST请求：" class="headerlink" title="只获取POST请求："></a>只获取POST请求：</h5><pre><code class="hljs apache"><span class="hljs-attribute">port</span> <span class="hljs-number">80</span> and (tcp[<span class="hljs-number">32</span>:<span class="hljs-number">4</span>] - <span class="hljs-number">0</span>x<span class="hljs-number">504</span>F<span class="hljs-number">5354</span> = <span class="hljs-number">0</span>)</code></pre><h5 id="获取第一个http响应数据包："><a href="#获取第一个http响应数据包：" class="headerlink" title="获取第一个http响应数据包："></a>获取第一个http响应数据包：</h5><pre><code class="hljs apache"><span class="hljs-attribute">port</span> <span class="hljs-number">80</span> and (tcp[<span class="hljs-number">32</span>:<span class="hljs-number">6</span>] - <span class="hljs-number">0</span>x<span class="hljs-number">485454502</span>f<span class="hljs-number">31</span> = <span class="hljs-number">0</span>)<span class="hljs-attribute">port</span> <span class="hljs-number">80</span> and ((tcp[<span class="hljs-number">32</span>:<span class="hljs-number">4</span>] - <span class="hljs-number">0</span>x<span class="hljs-number">47455420</span> = <span class="hljs-number">0</span>) or (tcp[<span class="hljs-number">32</span>:<span class="hljs-number">4</span>] - <span class="hljs-number">0</span>x<span class="hljs-number">504</span>F<span class="hljs-number">5354</span> = <span class="hljs-number">0</span>) or (tcp[<span class="hljs-number">32</span>:<span class="hljs-number">6</span>] - <span class="hljs-number">0</span>x<span class="hljs-number">485454502</span>f<span class="hljs-number">31</span> = <span class="hljs-number">0</span>))</code></pre><h5 id="获取所有HTTP请求（不包含syn，ack等，也就是有数据的tcp）："><a href="#获取所有HTTP请求（不包含syn，ack等，也就是有数据的tcp）：" class="headerlink" title="获取所有HTTP请求（不包含syn，ack等，也就是有数据的tcp）："></a>获取所有HTTP请求（不包含syn，ack等，也就是有数据的tcp）：</h5><pre><code class="hljs apache"><span class="hljs-attribute">tcp</span> port <span class="hljs-number">80</span> and (((ip[<span class="hljs-number">2</span>:<span class="hljs-number">2</span>] - ((ip[<span class="hljs-number">0</span>]&amp;<span class="hljs-number">0</span>xf)&lt;&lt;<span class="hljs-number">2</span>)) - ((tcp[<span class="hljs-number">12</span>]&amp;<span class="hljs-number">0</span>xf<span class="hljs-number">0</span>)&gt;&gt;<span class="hljs-number">2</span>)) != <span class="hljs-number">0</span>)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tcpdump</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/08/05/hello-world/"/>
    <url>/2020/08/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
